// Initialte variables
const video = document.querySelector('video');
const playbackDuration = document.querySelector('.playback-duration');
const progressBar = document.querySelector('.progress-bar');
const progressBarBackground = document.querySelector('.progress-bar-background');
const clip = { };
const buttons = { };

// Function to convert a date object to 'mm:ss' format
let toTimeString = date => {
  let date = date.toTimeString().split(' ')[0];
  date = date.slice(3, 8);
  return date;
}

// Get buttons
buttons.play = document.querySelector('.play');
buttons.pause = document.querySelector('.pause');
buttons.mute = document.querySelector('.mute');
buttons.unmute = document.querySelector('.unmute');

// By default, these shouldn't be displayed
buttons.pause.style.display = 'none';
buttons.mute.style.display = 'none';

// Don't want to annoy visitors
video.volume = 0;

// Show duration when video is ready to play
video.onloadeddata = _ => {
  let duration = new Date(0, 0, 0, 0, 0, 0, video.duration * 1000);
  playbackDuration.querySelector('.duration').innerHTML = toTimeString(duration);
}

// Set actions on buttons
buttons.play.onclick = _ => video.play();
buttons.pause.onclick = _ => video.pause();
buttons.mute.onclick = _ => video.volume = 1;
buttons.unmute.onclick = _ => video.volume = 0;

// Toggle buttons when played / paused
video.onplay = _ => {
  buttons.play.style.display = 'none';
  buttons.pause.style.display = 'block';
}

video.onpause = _ => {
  buttons.play.style.display = 'block';
  buttons.pause.style.display = 'none';
} 

// Toggle mute buttons when volume changes
video.onvolumechange = _ => {
  if (video.volume == 0) {
    buttons.mute.style.display = 'block';
    buttons.unmute.style.display = 'none';
  } else {
    buttons.mute.style.display = 'none';
    buttons.unmute.style.display = 'block';
  }
}

// Change video location when user clicks on progress bar
progressBarBackground.onclick = event => {
  let positionRatio = event.offsetX / progressBarBackground.offsetWidth;
  video.currentTime = video.duration * positionRatio;
}

// update display as video seeks
video.ontimeupdate = _ => {
  
  // Update progress bar
  let durationRatio = video.currentTime / video.duration;
  progressBar.style.width = durationRatio * 100 + '%';

  // Update playback duration
  let currentTime = new Date(0, 0, 0, 0, 0, 0, video.currentTime * 1000); 
  currentTime = toTimeString(currentTime);
  playbackDuration.querySelector('.progress').innerHTML = currentTime;

}